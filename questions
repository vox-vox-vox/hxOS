1. 事实上 Unbuffered I/O 这个名词是有些误导的，虽然 write 系统调用位于 C
标准库 I/O 缓冲区的底层，但在 write 的底层也可以分配一个内核 I/O 缓冲区，
所以 write 也不一定是直接写到文件的，也可能写到内核 I/O 缓冲区中，至于究
竟写到了文件中还是内核缓冲区中对于进程来说是没有差别的，如果进程 A 和
进程 B 打开同一文件，进程 A 写到内核 I/O 缓冲区中的数据从进程 B 也能读到，
而 C 标准库的 I/O 缓冲区则不具有这一特性（想一想为什么）。

2. 文件描述符（int）和FILE*
进程描述符=task_struct=PCB(process control block)
文件描述符表=file_struct,其中每一个表项包含一个指向已打开文件的指针。
文件描述符表=指针数组；文件描述符=指针数组的index
对于C标准IO库来说，打开的文件由FILE*标识；对内核来说打开的文件由文件描述符标识

3. 
	1. 内核和磁盘不在一起嘛
	2. 什么叫传给内核，内核再写回设备，这居然是两个过程
	3. 用户空间/内核空间，用户程序/内核，C标准IO缓冲区/磁盘 之间的关系
	4. 标准输入输出 和 终端设备有什么关系？ 


